# .github/workflows/ci-cd.yml
name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE: myorg/myapp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest --junitxml=reports/junit.xml

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: junit
          path: reports/junit.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (optional for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decode Kubeconfig
        if: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl config current-context

      - name: Deploy to Kubernetes
        if: ${{ secrets.KUBE_CONFIG }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl set image deployment/myapp myapp=${{ env.IMAGE }}:${{ github.sha }} -n staging || kubectl apply -f k8s/deployment.yaml -n staging
          kubectl rollout status deployment/myapp -n staging --timeout=120s

      - name: Optional: SSH deploy to remote Docker host
        if: ${{ secrets.REMOTE_SSH }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          script: |
            docker pull ${{ env.IMAGE }}:${{ github.sha }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 8000:8000 ${{ env.IMAGE }}:${{ github.sha }}
